import pytest

import numpy as np
import torch
from graph_nn_vae.data.subgraphs import (
    generate_subgraphs,
)


@pytest.mark.parametrize(
    "graph,mask,num_nodes,num_blocks,block_size,new_size,stride,probability,expected_graph,expected_mask,expected_num_nodes",
    [
        (
            [[[0]], [[1]], [[1]], [[1]], [[0]], [[1]]],
            [[[1]], [[1]], [[1]], [[1]], [[1]], [[1]]],
            4,
            3,
            1,
            2,
            1,
            1.0,
            [[[[1]], [[1]], [[0]]], [[[1]], [[0]], [[1]]]],
            [[[[1]], [[1]], [[1]]], [[[1]], [[1]], [[1]]]],
            [3, 3],
        ),
        (
            [
                [[0]],
                [[0]],
                [[0]],
                [[1]],
                [[1]],
                [[0]],
                [[1]],
                [[0]],
                [[0]],
                [[1]],
                [[0]],
                [[1]],
                [[0]],
                [[1]],
                [[1]],
            ],
            [
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
                [[1]],
            ],
            6,
            5,
            1,
            3,
            2,
            1.0,
            [
                [[[1]], [[1]], [[0]], [[0]], [[1]], [[0]]],
                [[[0]], [[0]], [[1]], [[0]], [[1]], [[1]]],
            ],
            [
                [[[1]], [[1]], [[1]], [[1]], [[1]], [[1]]],
                [[[1]], [[1]], [[1]], [[1]], [[1]], [[1]]],
            ],
            [4, 4],
        ),
        (
            #### 000
            #### 000
            #### 100
            #### 110 000
            #### 101 000
            #### 010 100
            #### 101 110 000
            #### 010 101 000
            #### 101 011 100
            #### 010 101 110 000
            #### 101 011 101 000
            #### 110 101 111 100
            [
                [[1, 1, 0], [1, 0, 1], [0, 1, 0]],
                [[1, 0, 1], [0, 1, 0], [1, 0, 1]],
                [[1, 0, 1], [0, 1, 1], [1, 0, 1]],
                [[1, 1, 0], [1, 0, 1], [0, 1, 0]],
                [[1, 1, 0], [1, 0, 1], [0, 1, 1]],
                [[1, 1, 0], [1, 0, 1], [1, 1, 1]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
            ],
            [
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
            ],
            11,
            4,
            3,
            2,
            1,
            1.0,
            [
                [
                    [[1, 1, 0], [1, 0, 1], [0, 1, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
                [
                    [[1, 1, 0], [1, 0, 1], [0, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
                [
                    [[1, 1, 0], [1, 0, 1], [1, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
            ],
            [
                [
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
                [
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
                [
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
            ],
            [5, 5, 5],
        ),
        (
            #### 000
            #### 000
            #### 100
            #### 110 000
            #### 101 000
            #### 010 100
            #### 101 110 000
            #### 010 101 000
            #### 101 011 100
            #### 010 101 110 000
            #### 101 011 101 000
            #### 110 101 111 100
            [
                [[1, 1, 0], [1, 0, 1], [0, 1, 0]],
                [[1, 0, 1], [0, 1, 0], [1, 0, 1]],
                [[1, 0, 1], [0, 1, 1], [1, 0, 1]],
                [[1, 1, 0], [1, 0, 1], [0, 1, 0]],
                [[1, 1, 0], [1, 0, 1], [0, 1, 1]],
                [[1, 1, 0], [1, 0, 1], [1, 1, 1]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
            ],
            [
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
            ],
            11,
            4,
            3,
            3,
            1,
            1.0,
            [
                [
                    [[1, 0, 1], [0, 1, 0], [1, 0, 1]],
                    [[1, 1, 0], [1, 0, 1], [0, 1, 0]],
                    [[1, 1, 0], [1, 0, 1], [0, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
                [
                    [[1, 0, 1], [0, 1, 1], [1, 0, 1]],
                    [[1, 1, 0], [1, 0, 1], [0, 1, 1]],
                    [[1, 1, 0], [1, 0, 1], [1, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
            ],
            [
                [
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
                [
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                    [[0, 0, 0], [0, 0, 0], [1, 0, 0]],
                ],
            ],
            [8, 8],
        ),
    ],
)
def test_generate_subgraphs(
    graph,
    mask,
    num_nodes,
    num_blocks,
    block_size,
    new_size,
    stride,
    probability,
    expected_graph,
    expected_mask,
    expected_num_nodes,
):
    graph = torch.Tensor(np.array(graph, dtype=np.float32))
    expected_graph = torch.Tensor(np.array(expected_graph, dtype=np.float32))
    expected_mask = torch.Tensor(np.array(expected_mask, dtype=np.int64)).long()

    graphs, graph_masks, graphs_num_nodes = generate_subgraphs(
        graph=torch.tensor(graph),
        mask=torch.tensor(mask),
        num_nodes=num_nodes,
        num_blocks=num_blocks,
        block_size=block_size,
        new_size=new_size,
        stride=stride,
        probability=probability,
    )
    assert torch.equal(torch.stack(graphs), expected_graph)
    assert torch.equal(torch.stack(graph_masks), expected_mask)
    assert torch.equal(
        torch.stack(graphs_num_nodes), torch.tensor(expected_num_nodes).int()
    )


#     # ([0, 1, 1, 1, 0, 1], 4, 3, 1, 1.0, [[1, 1, 0], [1, 0, 1]]),
#     # ([0, 1, 1, 1, 0, 1], 4, 4, 1, 1.0, [[0, 1, 1, 1, 0, 1]]),
#     # ([0, 1, 1, 1, 0, 1], 4, 8, 1, 1.0, [[0, 1, 1, 1, 0, 1]]),
#     # ([0, 1, 1, 1, 0, 1], 4, 8, 5, 1.0, [[0, 1, 1, 1, 0, 1]]),
#     # (
#     #     [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1],
#     #     6,
#     #     3,
#     #     1,
#     #     1.0,
#     #     [[1, 0, 1], [0, 1, 0], [0, 0, 1], [1, 1, 1]],
#     # ),
#     # (
#     #     [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1],
#     #     6,
#     #     4,
#     #     1,
#     #     1.0,
#     #     [[1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1]],
#     # ),
#     # (
#     #     [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1],
#     #     6,
#     #     4,
#     #     2,
#     #     1.0,
#     #     [[1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1]],
#     # ),
